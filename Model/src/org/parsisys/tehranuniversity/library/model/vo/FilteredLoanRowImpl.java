package org.parsisys.tehranuniversity.library.model.vo;

import fadak.base.TemplateEntityObject;
import fadak.base.TemplateViewRow;

import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jan 18 12:37:13 GMT+04:00 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class FilteredLoanRowImpl extends TemplateViewRow {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Labcol {
            public Object get(FilteredLoanRowImpl obj) {
                return obj.getLabcol();
            }

            public void put(FilteredLoanRowImpl obj, Object value) {
                obj.setLabcol((Number)value);
            }
        }
        ,
        LoanDate {
            public Object get(FilteredLoanRowImpl obj) {
                return obj.getLoanDate();
            }

            public void put(FilteredLoanRowImpl obj, Object value) {
                obj.setLoanDate((Number)value);
            }
        }
        ,
        RetDate {
            public Object get(FilteredLoanRowImpl obj) {
                return obj.getRetDate();
            }

            public void put(FilteredLoanRowImpl obj, Object value) {
                obj.setRetDate((Number)value);
            }
        }
        ,
        RealRetDate {
            public Object get(FilteredLoanRowImpl obj) {
                return obj.getRealRetDate();
            }

            public void put(FilteredLoanRowImpl obj, Object value) {
                obj.setRealRetDate((Number)value);
            }
        }
        ,
        ArtId {
            public Object get(FilteredLoanRowImpl obj) {
                return obj.getArtId();
            }

            public void put(FilteredLoanRowImpl obj, Object value) {
                obj.setArtId((Number)value);
            }
        }
        ,
        MemArtId {
            public Object get(FilteredLoanRowImpl obj) {
                return obj.getMemArtId();
            }

            public void put(FilteredLoanRowImpl obj, Object value) {
                obj.setMemArtId((Number)value);
            }
        }
        ,
        PhbookArtId {
            public Object get(FilteredLoanRowImpl obj) {
                return obj.getPhbookArtId();
            }

            public void put(FilteredLoanRowImpl obj, Object value) {
                obj.setPhbookArtId((Number)value);
            }
        }
        ,
        LoanType {
            public Object get(FilteredLoanRowImpl obj) {
                return obj.getLoanType();
            }

            public void put(FilteredLoanRowImpl obj, Object value) {
                obj.setLoanType((Number)value);
            }
        }
        ,
        ReturnType {
            public Object get(FilteredLoanRowImpl obj) {
                return obj.getReturnType();
            }

            public void put(FilteredLoanRowImpl obj, Object value) {
                obj.setReturnType((Number)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(FilteredLoanRowImpl object);

        public abstract void put(FilteredLoanRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int LABCOL = AttributesEnum.Labcol.index();
    public static final int LOANDATE = AttributesEnum.LoanDate.index();
    public static final int RETDATE = AttributesEnum.RetDate.index();
    public static final int REALRETDATE = AttributesEnum.RealRetDate.index();
    public static final int ARTID = AttributesEnum.ArtId.index();
    public static final int MEMARTID = AttributesEnum.MemArtId.index();
    public static final int PHBOOKARTID = AttributesEnum.PhbookArtId.index();
    public static final int LOANTYPE = AttributesEnum.LoanType.index();
    public static final int RETURNTYPE = AttributesEnum.ReturnType.index();

    /**
     * This is the default constructor (do not remove).
     */
    public FilteredLoanRowImpl() {
    }

    /**
     * Gets Loan entity object.
     * @return the Loan
     */
    public TemplateEntityObject getLoan() {
        return (TemplateEntityObject)getEntity(0);
    }

    /**
     * Gets the attribute value for LABCOL using the alias name Labcol.
     * @return the LABCOL
     */
    public Number getLabcol() {
        return (Number) getAttributeInternal(LABCOL);
    }

    /**
     * Sets <code>value</code> as attribute value for LABCOL using the alias name Labcol.
     * @param value value to set the LABCOL
     */
    public void setLabcol(Number value) {
        setAttributeInternal(LABCOL, value);
    }

    /**
     * Gets the attribute value for LOAN_DATE using the alias name LoanDate.
     * @return the LOAN_DATE
     */
    public Number getLoanDate() {
        return (Number) getAttributeInternal(LOANDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for LOAN_DATE using the alias name LoanDate.
     * @param value value to set the LOAN_DATE
     */
    public void setLoanDate(Number value) {
        setAttributeInternal(LOANDATE, value);
    }

    /**
     * Gets the attribute value for RET_DATE using the alias name RetDate.
     * @return the RET_DATE
     */
    public Number getRetDate() {
        return (Number) getAttributeInternal(RETDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for RET_DATE using the alias name RetDate.
     * @param value value to set the RET_DATE
     */
    public void setRetDate(Number value) {
        setAttributeInternal(RETDATE, value);
    }

    /**
     * Gets the attribute value for REAL_RET_DATE using the alias name RealRetDate.
     * @return the REAL_RET_DATE
     */
    public Number getRealRetDate() {
        return (Number) getAttributeInternal(REALRETDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for REAL_RET_DATE using the alias name RealRetDate.
     * @param value value to set the REAL_RET_DATE
     */
    public void setRealRetDate(Number value) {
        setAttributeInternal(REALRETDATE, value);
    }

    /**
     * Gets the attribute value for ART_ID using the alias name ArtId.
     * @return the ART_ID
     */
    public Number getArtId() {
        return (Number) getAttributeInternal(ARTID);
    }

    /**
     * Sets <code>value</code> as attribute value for ART_ID using the alias name ArtId.
     * @param value value to set the ART_ID
     */
    public void setArtId(Number value) {
        setAttributeInternal(ARTID, value);
    }

    /**
     * Gets the attribute value for MEM_ART_ID using the alias name MemArtId.
     * @return the MEM_ART_ID
     */
    public Number getMemArtId() {
        return (Number) getAttributeInternal(MEMARTID);
    }

    /**
     * Sets <code>value</code> as attribute value for MEM_ART_ID using the alias name MemArtId.
     * @param value value to set the MEM_ART_ID
     */
    public void setMemArtId(Number value) {
        setAttributeInternal(MEMARTID, value);
    }

    /**
     * Gets the attribute value for PHBOOK_ART_ID using the alias name PhbookArtId.
     * @return the PHBOOK_ART_ID
     */
    public Number getPhbookArtId() {
        return (Number) getAttributeInternal(PHBOOKARTID);
    }

    /**
     * Sets <code>value</code> as attribute value for PHBOOK_ART_ID using the alias name PhbookArtId.
     * @param value value to set the PHBOOK_ART_ID
     */
    public void setPhbookArtId(Number value) {
        setAttributeInternal(PHBOOKARTID, value);
    }


    /**
     * Gets the attribute value for LOAN_TYPE using the alias name LoanType.
     * @return the LOAN_TYPE
     */
    public Number getLoanType() {
        return (Number) getAttributeInternal(LOANTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for LOAN_TYPE using the alias name LoanType.
     * @param value value to set the LOAN_TYPE
     */
    public void setLoanType(Number value) {
        setAttributeInternal(LOANTYPE, value);
    }

    /**
     * Gets the attribute value for RETURN_TYPE using the alias name ReturnType.
     * @return the RETURN_TYPE
     */
    public Number getReturnType() {
        return (Number) getAttributeInternal(RETURNTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for RETURN_TYPE using the alias name ReturnType.
     * @param value value to set the RETURN_TYPE
     */
    public void setReturnType(Number value) {
        setAttributeInternal(RETURNTYPE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
