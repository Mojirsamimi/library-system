package org.parsisys.tehranuniversity.library.model.vo.report;

import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;

import org.parsisys.tehranuniversity.library.model.eo.NoteImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Mar 03 12:47:32 CST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class Rep_NotesVoRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Labcol {
            public Object get(Rep_NotesVoRowImpl obj) {
                return obj.getLabcol();
            }

            public void put(Rep_NotesVoRowImpl obj, Object value) {
                obj.setLabcol((Number)value);
            }
        }
        ,
        Note1 {
            public Object get(Rep_NotesVoRowImpl obj) {
                return obj.getNote1();
            }

            public void put(Rep_NotesVoRowImpl obj, Object value) {
                obj.setNote1((String)value);
            }
        }
        ,
        OrderNo {
            public Object get(Rep_NotesVoRowImpl obj) {
                return obj.getOrderNo();
            }

            public void put(Rep_NotesVoRowImpl obj, Object value) {
                obj.setOrderNo((Number)value);
            }
        }
        ,
        VbookArtId {
            public Object get(Rep_NotesVoRowImpl obj) {
                return obj.getVbookArtId();
            }

            public void put(Rep_NotesVoRowImpl obj, Object value) {
                obj.setVbookArtId((Number)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(Rep_NotesVoRowImpl object);

        public abstract void put(Rep_NotesVoRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int LABCOL = AttributesEnum.Labcol.index();
    public static final int NOTE1 = AttributesEnum.Note1.index();
    public static final int ORDERNO = AttributesEnum.OrderNo.index();
    public static final int VBOOKARTID = AttributesEnum.VbookArtId.index();

    /**
     * This is the default constructor (do not remove).
     */
    public Rep_NotesVoRowImpl() {
    }

    /**
     * Gets Note entity object.
     * @return the Note
     */
    public NoteImpl getNote() {
        return (NoteImpl)getEntity(0);
    }

    /**
     * Gets the attribute value for LABCOL using the alias name Labcol.
     * @return the LABCOL
     */
    public Number getLabcol() {
        return (Number) getAttributeInternal(LABCOL);
    }

    /**
     * Sets <code>value</code> as attribute value for LABCOL using the alias name Labcol.
     * @param value value to set the LABCOL
     */
    public void setLabcol(Number value) {
        setAttributeInternal(LABCOL, value);
    }

    /**
     * Gets the attribute value for NOTE using the alias name Note1.
     * @return the NOTE
     */
    public String getNote1() {
        return (String) getAttributeInternal(NOTE1);
    }

    /**
     * Sets <code>value</code> as attribute value for NOTE using the alias name Note1.
     * @param value value to set the NOTE
     */
    public void setNote1(String value) {
        setAttributeInternal(NOTE1, value);
    }

    /**
     * Gets the attribute value for ORDER_NO using the alias name OrderNo.
     * @return the ORDER_NO
     */
    public Number getOrderNo() {
        return (Number) getAttributeInternal(ORDERNO);
    }

    /**
     * Sets <code>value</code> as attribute value for ORDER_NO using the alias name OrderNo.
     * @param value value to set the ORDER_NO
     */
    public void setOrderNo(Number value) {
        setAttributeInternal(ORDERNO, value);
    }

    /**
     * Gets the attribute value for VBOOK_ART_ID using the alias name VbookArtId.
     * @return the VBOOK_ART_ID
     */
    public Number getVbookArtId() {
        return (Number) getAttributeInternal(VBOOKARTID);
    }

    /**
     * Sets <code>value</code> as attribute value for VBOOK_ART_ID using the alias name VbookArtId.
     * @param value value to set the VBOOK_ART_ID
     */
    public void setVbookArtId(Number value) {
        setAttributeInternal(VBOOKARTID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
