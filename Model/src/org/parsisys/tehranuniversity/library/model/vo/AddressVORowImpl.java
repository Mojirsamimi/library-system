package org.parsisys.tehranuniversity.library.model.vo;


import java.sql.SQLException;

import oracle.jbo.AttributeList;
import oracle.jbo.RowSet;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;

import org.parsisys.tehranuniversity.library.model.am.AppModuleImpl;
import org.parsisys.tehranuniversity.library.model.vo.RO.DummyVOImpl;
import org.parsisys.tehranuniversity.library.util.ParsiUtil;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Jul 22 23:42:20 GMT+04:00 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AddressVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Active {
            public Object get(AddressVORowImpl obj) {
                return obj.getActive();
            }

            public void put(AddressVORowImpl obj, Object value) {
                obj.setActive((Number)value);
            }
        }
        ,
        Address1 {
            public Object get(AddressVORowImpl obj) {
                return obj.getAddress1();
            }

            public void put(AddressVORowImpl obj, Object value) {
                obj.setAddress1((String)value);
            }
        }
        ,
        OrderNo {
            public Object get(AddressVORowImpl obj) {
                return obj.getOrderNo();
            }

            public void put(AddressVORowImpl obj, Object value) {
                obj.setOrderNo((Number)value);
            }
        }
        ,
        PersArtId {
            public Object get(AddressVORowImpl obj) {
                return obj.getPersArtId();
            }

            public void put(AddressVORowImpl obj, Object value) {
                obj.setPersArtId((Number)value);
            }
        }
        ,
        AddressVO_PersonVOLookup {
            public Object get(AddressVORowImpl obj) {
                return obj.getAddressVO_PersonVOLookup();
            }

            public void put(AddressVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CheckBox01View1 {
            public Object get(AddressVORowImpl obj) {
                return obj.getCheckBox01View1();
            }

            public void put(AddressVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(AddressVORowImpl object);

        public abstract void put(AddressVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ACTIVE = AttributesEnum.Active.index();
    public static final int ADDRESS1 = AttributesEnum.Address1.index();
    public static final int ORDERNO = AttributesEnum.OrderNo.index();
    public static final int PERSARTID = AttributesEnum.PersArtId.index();
    public static final int ADDRESSVO_PERSONVOLOOKUP = AttributesEnum.AddressVO_PersonVOLookup.index();
    public static final int CHECKBOX01VIEW1 = AttributesEnum.CheckBox01View1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AddressVORowImpl() {
    }
  @Override
  protected void create(AttributeList attributeList) {
        RowSet addressVO = getViewObject().createRowSet("address");
        AddressVORowImpl currAddress=null;
        int temp=0;
        while(addressVO.hasNext()) {
          currAddress = (AddressVORowImpl)addressVO.next();
            if(ParsiUtil.NVL(currAddress.getOrderNo()).intValue()>temp) {
              temp=currAddress.getOrderNo().intValue();
            }
        }
    addressVO.closeRowSet();
    setOrderNo(new Number(temp+1));
//        DummyVOImpl dummy=((AppModuleImpl)getApplicationModule()).getDummyVO1();
//      dummy.setQuery("select max(order_no) from address where pers_art_id="+getPersArtId());
//      dummy.executeQuery();
//      Object dummy_order=dummy.first().getAttribute("Dummy");
//      String order=(dummy_order==null?"0":dummy_order.toString());
//      try {
//          setOrderNo(new Number(order).add(1));
//      } catch (SQLException e) {
//          e.printStackTrace();
//      }
      super.create(attributeList);
  }
    /**
     * Gets Address entity object.
     * @return the Address
     */
    public EntityImpl getAddress() {
        return (EntityImpl)getEntity(0);
    }

    /**
     * Gets the attribute value for ACTIVE using the alias name Active.
     * @return the ACTIVE
     */
    public Number getActive() {
        return (Number) getAttributeInternal(ACTIVE);
    }

    /**
     * Sets <code>value</code> as attribute value for ACTIVE using the alias name Active.
     * @param value value to set the ACTIVE
     */
    public void setActive(Number value) {
        setAttributeInternal(ACTIVE, value);
    }

    /**
     * Gets the attribute value for ADDRESS using the alias name Address1.
     * @return the ADDRESS
     */
    public String getAddress1() {
        return (String) getAttributeInternal(ADDRESS1);
    }

    /**
     * Sets <code>value</code> as attribute value for ADDRESS using the alias name Address1.
     * @param value value to set the ADDRESS
     */
    public void setAddress1(String value) {
        setAttributeInternal(ADDRESS1, value);
    }

    /**
     * Gets the attribute value for ORDER_NO using the alias name OrderNo.
     * @return the ORDER_NO
     */
    public Number getOrderNo() {
        return (Number) getAttributeInternal(ORDERNO);
    }

    /**
     * Sets <code>value</code> as attribute value for ORDER_NO using the alias name OrderNo.
     * @param value value to set the ORDER_NO
     */
    public void setOrderNo(Number value) {
        setAttributeInternal(ORDERNO, value);
    }

    /**
     * Gets the attribute value for PERS_ART_ID using the alias name PersArtId.
     * @return the PERS_ART_ID
     */
    public Number getPersArtId() {
        return (Number) getAttributeInternal(PERSARTID);
    }

    /**
     * Sets <code>value</code> as attribute value for PERS_ART_ID using the alias name PersArtId.
     * @param value value to set the PERS_ART_ID
     */
    public void setPersArtId(Number value) {
        setAttributeInternal(PERSARTID, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> AddressVO_PersonVOLookup.
     */
    public RowSet getAddressVO_PersonVOLookup() {
        return (RowSet)getAttributeInternal(ADDRESSVO_PERSONVOLOOKUP);
    }

    /**
     * Gets the view accessor <code>RowSet</code> CheckBox01View1.
     */
    public RowSet getCheckBox01View1() {
        return (RowSet)getAttributeInternal(CHECKBOX01VIEW1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
