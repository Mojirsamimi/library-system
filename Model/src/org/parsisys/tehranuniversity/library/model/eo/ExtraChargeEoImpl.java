package org.parsisys.tehranuniversity.library.model.eo;

import fadak.base.TemplateEntityObject;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;

import org.parsisys.tehranuniversity.library.util.ParsiUtil;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Oct 22 11:15:09 GMT+03:30 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ExtraChargeEoImpl extends TemplateEntityObject {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Labcol {
            public Object get(ExtraChargeEoImpl obj) {
                return obj.getLabcol();
            }

            public void put(ExtraChargeEoImpl obj, Object value) {
                obj.setLabcol((Number)value);
            }
        }
        ,
        ArtId {
            public Object get(ExtraChargeEoImpl obj) {
                return obj.getArtId();
            }

            public void put(ExtraChargeEoImpl obj, Object value) {
                obj.setArtId((DBSequence)value);
            }
        }
        ,
        Description {
            public Object get(ExtraChargeEoImpl obj) {
                return obj.getDescription();
            }

            public void put(ExtraChargeEoImpl obj, Object value) {
                obj.setDescription((String)value);
            }
        }
        ,
        ChargeId {
            public Object get(ExtraChargeEoImpl obj) {
                return obj.getChargeId();
            }

            public void put(ExtraChargeEoImpl obj, Object value) {
                obj.setChargeId((Number)value);
            }
        }
        ,
        ChargeValue {
            public Object get(ExtraChargeEoImpl obj) {
                return obj.getChargeValue();
            }

            public void put(ExtraChargeEoImpl obj, Object value) {
                obj.setChargeValue((Number)value);
            }
        }
        ,
        MemArtId {
            public Object get(ExtraChargeEoImpl obj) {
                return obj.getMemArtId();
            }

            public void put(ExtraChargeEoImpl obj, Object value) {
                obj.setMemArtId((Number)value);
            }
        }
        ,
        InsertDate {
            public Object get(ExtraChargeEoImpl obj) {
                return obj.getInsertDate();
            }

            public void put(ExtraChargeEoImpl obj, Object value) {
                obj.setInsertDate((Number)value);
            }
        }
        ,
        LibArtId {
            public Object get(ExtraChargeEoImpl obj) {
                return obj.getLibArtId();
            }

            public void put(ExtraChargeEoImpl obj, Object value) {
                obj.setLibArtId((Number)value);
            }
        }
        ,
        InitMember {
            public Object get(ExtraChargeEoImpl obj) {
                return obj.getInitMember();
            }

            public void put(ExtraChargeEoImpl obj, Object value) {
                obj.setInitMember((InitMemberImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(ExtraChargeEoImpl object);

        public abstract void put(ExtraChargeEoImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int LABCOL = AttributesEnum.Labcol.index();
    public static final int ARTID = AttributesEnum.ArtId.index();
    public static final int DESCRIPTION = AttributesEnum.Description.index();
    public static final int CHARGEID = AttributesEnum.ChargeId.index();
    public static final int CHARGEVALUE = AttributesEnum.ChargeValue.index();
    public static final int MEMARTID = AttributesEnum.MemArtId.index();
    public static final int INSERTDATE = AttributesEnum.InsertDate.index();
    public static final int LIBARTID = AttributesEnum.LibArtId.index();
    public static final int INITMEMBER = AttributesEnum.InitMember.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ExtraChargeEoImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("org.parsisys.tehranuniversity.library.model.eo.ExtraChargeEo");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for Labcol, using the alias name Labcol.
     * @return the Labcol
     */
    public Number getLabcol() {
        return (Number)getAttributeInternal(LABCOL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Labcol.
     * @param value value to set the Labcol
     */
    public void setLabcol(Number value) {
        setAttributeInternal(LABCOL, value);
    }

    /**
     * Gets the attribute value for ArtId, using the alias name ArtId.
     * @return the ArtId
     */
    public DBSequence getArtId() {
        return (DBSequence)getAttributeInternal(ARTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ArtId.
     * @param value value to set the ArtId
     */
    public void setArtId(DBSequence value) {
        setAttributeInternal(ARTID, value);
    }

    /**
     * Gets the attribute value for Description, using the alias name Description.
     * @return the Description
     */
    public String getDescription() {
        return (String)getAttributeInternal(DESCRIPTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for Description.
     * @param value value to set the Description
     */
    public void setDescription(String value) {
        setAttributeInternal(DESCRIPTION, value);
    }

    /**
     * Gets the attribute value for ChargeId, using the alias name ChargeId.
     * @return the ChargeId
     */
    public Number getChargeId() {
        return (Number)getAttributeInternal(CHARGEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ChargeId.
     * @param value value to set the ChargeId
     */
    public void setChargeId(Number value) {
        setAttributeInternal(CHARGEID, value);
    }

    /**
     * Gets the attribute value for ChargeValue, using the alias name ChargeValue.
     * @return the ChargeValue
     */
    public Number getChargeValue() {
        return (Number)getAttributeInternal(CHARGEVALUE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ChargeValue.
     * @param value value to set the ChargeValue
     */
    public void setChargeValue(Number value) {
        setAttributeInternal(CHARGEVALUE, value);
    }

    /**
     * Gets the attribute value for MemArtId, using the alias name MemArtId.
     * @return the MemArtId
     */
    public Number getMemArtId() {
        return (Number)getAttributeInternal(MEMARTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for MemArtId.
     * @param value value to set the MemArtId
     */
    public void setMemArtId(Number value) {
        setAttributeInternal(MEMARTID, value);
    }

    /**
     * Gets the attribute value for InsertDate, using the alias name InsertDate.
     * @return the InsertDate
     */
    public Number getInsertDate() {
        return (Number)getAttributeInternal(INSERTDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for InsertDate.
     * @param value value to set the InsertDate
     */
    public void setInsertDate(Number value) {
        setAttributeInternal(INSERTDATE, value);
    }

    /**
     * Gets the attribute value for LibArtId, using the alias name LibArtId.
     * @return the LibArtId
     */
    public Number getLibArtId() {
        return (Number)getAttributeInternal(LIBARTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for LibArtId.
     * @param value value to set the LibArtId
     */
    public void setLibArtId(Number value) {
        setAttributeInternal(LIBARTID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity InitMemberImpl.
     */
    public InitMemberImpl getInitMember() {
        return (InitMemberImpl)getAttributeInternal(INITMEMBER);
    }

    /**
     * Sets <code>value</code> as the associated entity InitMemberImpl.
     */
    public void setInitMember(InitMemberImpl value) {
        setAttributeInternal(INITMEMBER, value);
    }


    /**
     * @param labcol key constituent
     * @param artId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number labcol, DBSequence artId) {
        return new Key(new Object[]{labcol, artId});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
      setLabcol( (Number) getDBTransaction().getSession().getUserData().get("labcolno"));
      setLibArtId((Number) getDBTransaction().getSession().getUserData().get("libartid"));
        setInsertDate(ParsiUtil.DateToNumber());
        super.create(attributeList);
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
      
      
      if(operation==DML_INSERT) {
        SequenceImpl si =
            new SequenceImpl("BOOK.SEQ_EXTRA_CHARGE", getDBTransaction());
        setArtId(new DBSequence( si.getSequenceNumber()));
      }
        
        super.doDML(operation, e);
    }
}
