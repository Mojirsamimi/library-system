package org.parsisys.tehranuniversity.library.model.eo;

import oracle.jbo.Key;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 24 13:12:40 GMT+03:30 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CidConstImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        ConstKey {
            public Object get(CidConstImpl obj) {
                return obj.getConstKey();
            }

            public void put(CidConstImpl obj, Object value) {
                obj.setConstKey((String)value);
            }
        }
        ,
        Description {
            public Object get(CidConstImpl obj) {
                return obj.getDescription();
            }

            public void put(CidConstImpl obj, Object value) {
                obj.setDescription((String)value);
            }
        }
        ,
        ConstValue {
            public Object get(CidConstImpl obj) {
                return obj.getConstValue();
            }

            public void put(CidConstImpl obj, Object value) {
                obj.setConstValue((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(CidConstImpl object);

        public abstract void put(CidConstImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int CONSTKEY = AttributesEnum.ConstKey.index();
    public static final int DESCRIPTION = AttributesEnum.Description.index();
    public static final int CONSTVALUE = AttributesEnum.ConstValue.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CidConstImpl() {
    }

    /**
     * Gets the attribute value for ConstKey, using the alias name ConstKey.
     * @return the ConstKey
     */
    public String getConstKey() {
        return (String)getAttributeInternal(CONSTKEY);
    }

    /**
     * Sets <code>value</code> as the attribute value for ConstKey.
     * @param value value to set the ConstKey
     */
    public void setConstKey(String value) {
        setAttributeInternal(CONSTKEY, value);
    }

    /**
     * Gets the attribute value for Description, using the alias name Description.
     * @return the Description
     */
    public String getDescription() {
        return (String)getAttributeInternal(DESCRIPTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for Description.
     * @param value value to set the Description
     */
    public void setDescription(String value) {
        setAttributeInternal(DESCRIPTION, value);
    }

    /**
     * Gets the attribute value for ConstValue, using the alias name ConstValue.
     * @return the ConstValue
     */
    public String getConstValue() {
        return (String)getAttributeInternal(CONSTVALUE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ConstValue.
     * @param value value to set the ConstValue
     */
    public void setConstValue(String value) {
        setAttributeInternal(CONSTVALUE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @param constKey key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String constKey) {
        return new Key(new Object[]{constKey});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("org.parsisys.tehranuniversity.library.model.eo.CidConst");
        }
        return mDefinitionObject;
    }
}
