package org.parsisys.tehranuniversity.library.model.eo;

import fadak.base.TemplateEntityObject;

import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jan 15 14:36:54 CST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SeeAlsoProviderImpl extends TemplateEntityObject {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Labcol {
            public Object get(SeeAlsoProviderImpl obj) {
                return obj.getLabcol();
            }

            public void put(SeeAlsoProviderImpl obj, Object value) {
                obj.setLabcol((Number)value);
            }
        }
        ,
        PrvArtId {
            public Object get(SeeAlsoProviderImpl obj) {
                return obj.getPrvArtId();
            }

            public void put(SeeAlsoProviderImpl obj, Object value) {
                obj.setPrvArtId((Number)value);
            }
        }
        ,
        PrvArtIdRelatedTo {
            public Object get(SeeAlsoProviderImpl obj) {
                return obj.getPrvArtIdRelatedTo();
            }

            public void put(SeeAlsoProviderImpl obj, Object value) {
                obj.setPrvArtIdRelatedTo((Number)value);
            }
        }
        ,
        Provider1 {
            public Object get(SeeAlsoProviderImpl obj) {
                return obj.getProvider1();
            }

            public void put(SeeAlsoProviderImpl obj, Object value) {
                obj.setProvider1((ProviderImpl)value);
            }
        }
        ,
        Provider {
            public Object get(SeeAlsoProviderImpl obj) {
                return obj.getProvider();
            }

            public void put(SeeAlsoProviderImpl obj, Object value) {
                obj.setProvider((ProviderImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(SeeAlsoProviderImpl object);

        public abstract void put(SeeAlsoProviderImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int LABCOL = AttributesEnum.Labcol.index();
    public static final int PRVARTID = AttributesEnum.PrvArtId.index();
    public static final int PRVARTIDRELATEDTO = AttributesEnum.PrvArtIdRelatedTo.index();
    public static final int PROVIDER1 = AttributesEnum.Provider1.index();
    public static final int PROVIDER = AttributesEnum.Provider.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SeeAlsoProviderImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("org.parsisys.tehranuniversity.library.model.eo.SeeAlsoProvider");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for Labcol, using the alias name Labcol.
     * @return the Labcol
     */
    public Number getLabcol() {
        return (Number)getAttributeInternal(LABCOL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Labcol.
     * @param value value to set the Labcol
     */
    public void setLabcol(Number value) {
        setAttributeInternal(LABCOL, value);
    }

    /**
     * Gets the attribute value for PrvArtId, using the alias name PrvArtId.
     * @return the PrvArtId
     */
    public Number getPrvArtId() {
        return (Number)getAttributeInternal(PRVARTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for PrvArtId.
     * @param value value to set the PrvArtId
     */
    public void setPrvArtId(Number value) {
        setAttributeInternal(PRVARTID, value);
    }

    /**
     * Gets the attribute value for PrvArtIdRelatedTo, using the alias name PrvArtIdRelatedTo.
     * @return the PrvArtIdRelatedTo
     */
    public Number getPrvArtIdRelatedTo() {
        return (Number)getAttributeInternal(PRVARTIDRELATEDTO);
    }

    /**
     * Sets <code>value</code> as the attribute value for PrvArtIdRelatedTo.
     * @param value value to set the PrvArtIdRelatedTo
     */
    public void setPrvArtIdRelatedTo(Number value) {
        setAttributeInternal(PRVARTIDRELATEDTO, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity ProviderImpl.
     */
    public ProviderImpl getProvider() {
        return (ProviderImpl)getAttributeInternal(PROVIDER);
    }

    /**
     * Sets <code>value</code> as the associated entity ProviderImpl.
     */
    public void setProvider(ProviderImpl value) {
        setAttributeInternal(PROVIDER, value);
    }


    /**
     * @param labcol key constituent
     * @param prvArtId key constituent
     * @param prvArtIdRelatedTo key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number labcol, Number prvArtId,
                                       Number prvArtIdRelatedTo) {
        return new Key(new Object[]{labcol, prvArtId, prvArtIdRelatedTo});
    }

    /**
     * @return the associated entity ProviderImpl.
     */
    public ProviderImpl getProvider1() {
        return (ProviderImpl)getAttributeInternal(PROVIDER1);
    }

    /**
     * Sets <code>value</code> as the associated entity ProviderImpl.
     */
    public void setProvider1(ProviderImpl value) {
        setAttributeInternal(PROVIDER1, value);
    }


    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}
