package org.parsisys.tehranuniversity.library.model.eo;

import fadak.base.TemplateEntityObject;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Dec 17 16:31:27 GMT+04:00 2011
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CardRowImpl extends TemplateEntityObject {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Labcol {
            public Object get(CardRowImpl obj) {
                return obj.getLabcol();
            }

            public void put(CardRowImpl obj, Object value) {
                obj.setLabcol((Number)value);
            }
        }
        ,
        CrdArtId {
            public Object get(CardRowImpl obj) {
                return obj.getCrdArtId();
            }

            public void put(CardRowImpl obj, Object value) {
                obj.setCrdArtId((Number)value);
            }
        }
        ,
        RowNo {
            public Object get(CardRowImpl obj) {
                return obj.getRowNo();
            }

            public void put(CardRowImpl obj, Object value) {
                obj.setRowNo((Number)value);
            }
        }
        ,
        Item {
            public Object get(CardRowImpl obj) {
                return obj.getItem();
            }

            public void put(CardRowImpl obj, Object value) {
                obj.setItem((String)value);
            }
        }
        ,
        Card {
            public Object get(CardRowImpl obj) {
                return obj.getCard();
            }

            public void put(CardRowImpl obj, Object value) {
                obj.setCard((CardImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(CardRowImpl object);

        public abstract void put(CardRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int LABCOL = AttributesEnum.Labcol.index();
    public static final int CRDARTID = AttributesEnum.CrdArtId.index();
    public static final int ROWNO = AttributesEnum.RowNo.index();
    public static final int ITEM = AttributesEnum.Item.index();
    public static final int CARD = AttributesEnum.Card.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CardRowImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("org.parsisys.tehranuniversity.library.model.eo.CardRow");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for Labcol, using the alias name Labcol.
     * @return the Labcol
     */
    public Number getLabcol() {
        return (Number)getAttributeInternal(LABCOL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Labcol.
     * @param value value to set the Labcol
     */
    public void setLabcol(Number value) {
        setAttributeInternal(LABCOL, value);
    }

    /**
     * Gets the attribute value for CrdArtId, using the alias name CrdArtId.
     * @return the CrdArtId
     */
    public Number getCrdArtId() {
        return (Number)getAttributeInternal(CRDARTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CrdArtId.
     * @param value value to set the CrdArtId
     */
    public void setCrdArtId(Number value) {
        setAttributeInternal(CRDARTID, value);
    }

    /**
     * Gets the attribute value for RowNo, using the alias name RowNo.
     * @return the RowNo
     */
    public Number getRowNo() {
        return (Number)getAttributeInternal(ROWNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for RowNo.
     * @param value value to set the RowNo
     */
    public void setRowNo(Number value) {
        setAttributeInternal(ROWNO, value);
    }

    /**
     * Gets the attribute value for Item, using the alias name Item.
     * @return the Item
     */
    public String getItem() {
        return (String)getAttributeInternal(ITEM);
    }

    /**
     * Sets <code>value</code> as the attribute value for Item.
     * @param value value to set the Item
     */
    public void setItem(String value) {
        setAttributeInternal(ITEM, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity CardImpl.
     */
    public CardImpl getCard() {
        return (CardImpl)getAttributeInternal(CARD);
    }

    /**
     * Sets <code>value</code> as the associated entity CardImpl.
     */
    public void setCard(CardImpl value) {
        setAttributeInternal(CARD, value);
    }


    /**
     * @param labcol key constituent
     * @param crdArtId key constituent
     * @param rowNo key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number labcol, Number crdArtId,
                                       Number rowNo) {
        return new Key(new Object[]{labcol, crdArtId, rowNo});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}
