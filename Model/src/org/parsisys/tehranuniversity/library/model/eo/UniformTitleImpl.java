package org.parsisys.tehranuniversity.library.model.eo;

import com.ctc.wstx.cfg.ParsingErrorMsgs;

import fadak.base.TemplateEntityObject;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;

import org.parsisys.tehranuniversity.library.model.vo.RO.DummyVOImpl;
import org.parsisys.tehranuniversity.library.util.ParsiException;
import org.parsisys.tehranuniversity.library.util.ParsiUtil;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jan 20 16:08:46 GMT+04:00 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class UniformTitleImpl extends TemplateEntityObject {
    private static EntityDefImpl mDefinitionObject;


    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Labcol {
            public Object get(UniformTitleImpl obj) {
                return obj.getLabcol();
            }

            public void put(UniformTitleImpl obj, Object value) {
                obj.setLabcol((Number)value);
            }
        }
        ,
        Title {
            public Object get(UniformTitleImpl obj) {
                return obj.getTitle();
            }

            public void put(UniformTitleImpl obj, Object value) {
                obj.setTitle((String)value);
            }
        }
        ,
        ArtId {
            public Object get(UniformTitleImpl obj) {
                return obj.getArtId();
            }

            public void put(UniformTitleImpl obj, Object value) {
                obj.setArtId((DBSequence)value);
            }
        }
        ,
        ReferenceType {
            public Object get(UniformTitleImpl obj) {
                return obj.getReferenceType();
            }

            public void put(UniformTitleImpl obj, Object value) {
                obj.setReferenceType((Number)value);
            }
        }
        ,
        ReadingOrder {
            public Object get(UniformTitleImpl obj) {
                return obj.getReadingOrder();
            }

            public void put(UniformTitleImpl obj, Object value) {
                obj.setReadingOrder((Number)value);
            }
        }
        ,
        VirtualBook1 {
            public Object get(UniformTitleImpl obj) {
                return obj.getVirtualBook1();
            }

            public void put(UniformTitleImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        VbookUniformTitle2 {
            public Object get(UniformTitleImpl obj) {
                return obj.getVbookUniformTitle2();
            }

            public void put(UniformTitleImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        SeeUniformTitle {
            public Object get(UniformTitleImpl obj) {
                return obj.getSeeUniformTitle();
            }

            public void put(UniformTitleImpl obj, Object value) {
                obj.setSeeUniformTitle((SeeUniformTitleImpl)value);
            }
        }
        ,
        SeeAlsoUniformTitle1 {
            public Object get(UniformTitleImpl obj) {
                return obj.getSeeAlsoUniformTitle1();
            }

            public void put(UniformTitleImpl obj, Object value) {
                obj.setSeeAlsoUniformTitle1((SeeAlsoUniformTitleImpl)value);
            }
        }
        ,
        SeeAlsoUniformTitle {
            public Object get(UniformTitleImpl obj) {
                return obj.getSeeAlsoUniformTitle();
            }

            public void put(UniformTitleImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        VirtualBook {
            public Object get(UniformTitleImpl obj) {
                return obj.getVirtualBook();
            }

            public void put(UniformTitleImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        VbookUniformTitle1 {
            public Object get(UniformTitleImpl obj) {
                return obj.getVbookUniformTitle1();
            }

            public void put(UniformTitleImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        DummyVO1 {
            public Object get(UniformTitleImpl obj) {
                return obj.getDummyVO1();
            }

            public void put(UniformTitleImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(UniformTitleImpl object);

        public abstract void put(UniformTitleImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int LABCOL = AttributesEnum.Labcol.index();
    public static final int TITLE = AttributesEnum.Title.index();
    public static final int ARTID = AttributesEnum.ArtId.index();
    public static final int REFERENCETYPE = AttributesEnum.ReferenceType.index();
    public static final int READINGORDER = AttributesEnum.ReadingOrder.index();
    public static final int VIRTUALBOOK1 = AttributesEnum.VirtualBook1.index();
    public static final int VBOOKUNIFORMTITLE2 = AttributesEnum.VbookUniformTitle2.index();
    public static final int SEEUNIFORMTITLE = AttributesEnum.SeeUniformTitle.index();
    public static final int SEEALSOUNIFORMTITLE1 = AttributesEnum.SeeAlsoUniformTitle1.index();
    public static final int SEEALSOUNIFORMTITLE = AttributesEnum.SeeAlsoUniformTitle.index();
    public static final int VIRTUALBOOK = AttributesEnum.VirtualBook.index();
    public static final int VBOOKUNIFORMTITLE1 = AttributesEnum.VbookUniformTitle1.index();
    public static final int DUMMYVO1 = AttributesEnum.DummyVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public UniformTitleImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("org.parsisys.tehranuniversity.library.model.eo.UniformTitle");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for Labcol, using the alias name Labcol.
     * @return the Labcol
     */
    public Number getLabcol() {
        return (Number)getAttributeInternal(LABCOL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Labcol.
     * @param value value to set the Labcol
     */
    public void setLabcol(Number value) {
        setAttributeInternal(LABCOL, value);
    }

    /**
     * Gets the attribute value for Title, using the alias name Title.
     * @return the Title
     */
    public String getTitle() {
        return (String)getAttributeInternal(TITLE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Title.
     * @param value value to set the Title
     */
    public void setTitle(String value) {
        setAttributeInternal(TITLE, value);
    }

    /**
     * Gets the attribute value for ArtId, using the alias name ArtId.
     * @return the ArtId
     */
    public DBSequence getArtId() {
        return (DBSequence)getAttributeInternal(ARTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ArtId.
     * @param value value to set the ArtId
     */
    public void setArtId(DBSequence value) {
        setAttributeInternal(ARTID, value);
    }

    /**
     * Gets the attribute value for ReferenceType, using the alias name ReferenceType.
     * @return the ReferenceType
     */
    public Number getReferenceType() {
        return (Number)getAttributeInternal(REFERENCETYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ReferenceType.
     * @param value value to set the ReferenceType
     */
    public void setReferenceType(Number value) {
        setAttributeInternal(REFERENCETYPE, value);
    }

    /**
     * Gets the attribute value for ReadingOrder, using the alias name ReadingOrder.
     * @return the ReadingOrder
     */
    public Number getReadingOrder() {
        return (Number)getAttributeInternal(READINGORDER);
    }

    /**
     * Sets <code>value</code> as the attribute value for ReadingOrder.
     * @param value value to set the ReadingOrder
     */
    public void setReadingOrder(Number value) {
        setAttributeInternal(READINGORDER, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getVirtualBook1() {
        return (RowIterator)getAttributeInternal(VIRTUALBOOK1);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getVbookUniformTitle2() {
        return (RowIterator)getAttributeInternal(VBOOKUNIFORMTITLE2);
    }

    /**
     * @return the associated entity SeeUniformTitleImpl.
     */
    public SeeUniformTitleImpl getSeeUniformTitle() {
        return (SeeUniformTitleImpl)getAttributeInternal(SEEUNIFORMTITLE);
    }

    /**
     * Sets <code>value</code> as the associated entity SeeUniformTitleImpl.
     */
    public void setSeeUniformTitle(SeeUniformTitleImpl value) {
        setAttributeInternal(SEEUNIFORMTITLE, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public SeeAlsoUniformTitleImpl getSeeAlsoUniformTitle1() {
        return (SeeAlsoUniformTitleImpl)getAttributeInternal(SEEALSOUNIFORMTITLE1);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setSeeAlsoUniformTitle1(SeeAlsoUniformTitleImpl value) {
        setAttributeInternal(SEEALSOUNIFORMTITLE1, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getSeeAlsoUniformTitle() {
        return (RowIterator)getAttributeInternal(SEEALSOUNIFORMTITLE);
    }


    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getVirtualBook() {
        return (RowIterator)getAttributeInternal(VIRTUALBOOK);
    }


    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getVbookUniformTitle1() {
        return (RowIterator)getAttributeInternal(VBOOKUNIFORMTITLE1);
    }


    /**
     * Gets the view accessor <code>RowSet</code> DummyVO1.
     */
    public RowSet getDummyVO1() {
        return (RowSet)getAttributeInternal(DUMMYVO1);
    }

    /**
     * @param labcol key constituent
     * @param artId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number labcol, DBSequence artId) {
        return new Key(new Object[]{labcol, artId});
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        try{
        if(operation!=DML_DELETE) {
          setTitle(ParsiUtil.clearString(getTitle()));
        }
            
      if(operation==DML_INSERT) {
          if(chkDup())
              throw new ParsiException("عنوان قراردادی تکراری است.");
        SequenceImpl si=new SequenceImpl("LIBRARY.SEQ_UNIFORM_TITLE_ART_ID",getDBTransaction());
        setArtId(new DBSequence( si.getSequenceNumber()));
       
        
      }
        else if(operation==DML_UPDATE) {
          if(!ParsiUtil.stringToZeroValue(getTitle()).equals(getPostedAttribute(TITLE))) {
            if(chkDup())
              throw new ParsiException("عنوان قراردادی تکراری است.");
          }
      }
      super.doDML(operation, e);
        }catch (Exception ex) {
            if(ex instanceof ParsiException) {
              throw new JboException(((ParsiException)ex).getMessage());
            }else
          throw new JboException("خطا در ذخیره کردن رکورد عنوان قراردادی");
        }
    }
    public boolean chkDup() {
      DummyVOImpl dummy = (DummyVOImpl)getDummyVO1().getViewObject();
      dummy.setQuery("select art_id from uniform_title where nvl(upper(title),'0')='"+ParsiUtil.stringToZeroValue(getTitle()).toUpperCase().replaceAll("'", "''")+"' and labcol="+getDBTransaction().getSession().getUserData().get("labcolno"));
      dummy.executeQuery();
      return dummy.hasNext();
    }
}
