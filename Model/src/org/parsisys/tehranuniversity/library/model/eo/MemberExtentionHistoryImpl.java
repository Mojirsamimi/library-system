package org.parsisys.tehranuniversity.library.model.eo;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Apr 03 18:14:51 GMT+04:00 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MemberExtentionHistoryImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Labcol {
            public Object get(MemberExtentionHistoryImpl obj) {
                return obj.getLabcol();
            }

            public void put(MemberExtentionHistoryImpl obj, Object value) {
                obj.setLabcol((Number)value);
            }
        }
        ,
        InsertDate {
            public Object get(MemberExtentionHistoryImpl obj) {
                return obj.getInsertDate();
            }

            public void put(MemberExtentionHistoryImpl obj, Object value) {
                obj.setInsertDate((Number)value);
            }
        }
        ,
        RecType {
            public Object get(MemberExtentionHistoryImpl obj) {
                return obj.getRecType();
            }

            public void put(MemberExtentionHistoryImpl obj, Object value) {
                obj.setRecType((Number)value);
            }
        }
        ,
        ArtId {
            public Object get(MemberExtentionHistoryImpl obj) {
                return obj.getArtId();
            }

            public void put(MemberExtentionHistoryImpl obj, Object value) {
                obj.setArtId((DBSequence)value);
            }
        }
        ,
        MemsetupArtId {
            public Object get(MemberExtentionHistoryImpl obj) {
                return obj.getMemsetupArtId();
            }

            public void put(MemberExtentionHistoryImpl obj, Object value) {
                obj.setMemsetupArtId((Number)value);
            }
        }
        ,
        MemArtId {
            public Object get(MemberExtentionHistoryImpl obj) {
                return obj.getMemArtId();
            }

            public void put(MemberExtentionHistoryImpl obj, Object value) {
                obj.setMemArtId((Number)value);
            }
        }
        ,
        UserName {
            public Object get(MemberExtentionHistoryImpl obj) {
                return obj.getUserName();
            }

            public void put(MemberExtentionHistoryImpl obj, Object value) {
                obj.setUserName((String)value);
            }
        }
        ,
        Member {
            public Object get(MemberExtentionHistoryImpl obj) {
                return obj.getMember();
            }

            public void put(MemberExtentionHistoryImpl obj, Object value) {
                obj.setMember((MemberImpl)value);
            }
        }
        ,
        InitMember {
            public Object get(MemberExtentionHistoryImpl obj) {
                return obj.getInitMember();
            }

            public void put(MemberExtentionHistoryImpl obj, Object value) {
                obj.setInitMember((InitMemberImpl)value);
            }
        }
        ,
        MemberSetup {
            public Object get(MemberExtentionHistoryImpl obj) {
                return obj.getMemberSetup();
            }

            public void put(MemberExtentionHistoryImpl obj, Object value) {
                obj.setMemberSetup((EntityImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(MemberExtentionHistoryImpl object);

        public abstract void put(MemberExtentionHistoryImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int LABCOL = AttributesEnum.Labcol.index();
    public static final int INSERTDATE = AttributesEnum.InsertDate.index();
    public static final int RECTYPE = AttributesEnum.RecType.index();
    public static final int ARTID = AttributesEnum.ArtId.index();
    public static final int MEMSETUPARTID = AttributesEnum.MemsetupArtId.index();
    public static final int MEMARTID = AttributesEnum.MemArtId.index();
    public static final int USERNAME = AttributesEnum.UserName.index();
    public static final int MEMBER = AttributesEnum.Member.index();
    public static final int INITMEMBER = AttributesEnum.InitMember.index();
    public static final int MEMBERSETUP = AttributesEnum.MemberSetup.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MemberExtentionHistoryImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("org.parsisys.tehranuniversity.library.model.eo.MemberExtentionHistory");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for Labcol, using the alias name Labcol.
     * @return the Labcol
     */
    public Number getLabcol() {
        return (Number)getAttributeInternal(LABCOL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Labcol.
     * @param value value to set the Labcol
     */
    public void setLabcol(Number value) {
        setAttributeInternal(LABCOL, value);
    }

    /**
     * Gets the attribute value for InsertDate, using the alias name InsertDate.
     * @return the InsertDate
     */
    public Number getInsertDate() {
        return (Number)getAttributeInternal(INSERTDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for InsertDate.
     * @param value value to set the InsertDate
     */
    public void setInsertDate(Number value) {
        setAttributeInternal(INSERTDATE, value);
    }

    /**
     * Gets the attribute value for RecType, using the alias name RecType.
     * @return the RecType
     */
    public Number getRecType() {
        return (Number)getAttributeInternal(RECTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for RecType.
     * @param value value to set the RecType
     */
    public void setRecType(Number value) {
        setAttributeInternal(RECTYPE, value);
    }

    /**
     * Gets the attribute value for ArtId, using the alias name ArtId.
     * @return the ArtId
     */
    public DBSequence getArtId() {
        return (DBSequence)getAttributeInternal(ARTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ArtId.
     * @param value value to set the ArtId
     */
    public void setArtId(DBSequence value) {
        setAttributeInternal(ARTID, value);
    }

    /**
     * Gets the attribute value for MemsetupArtId, using the alias name MemsetupArtId.
     * @return the MemsetupArtId
     */
    public Number getMemsetupArtId() {
        return (Number)getAttributeInternal(MEMSETUPARTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for MemsetupArtId.
     * @param value value to set the MemsetupArtId
     */
    public void setMemsetupArtId(Number value) {
        setAttributeInternal(MEMSETUPARTID, value);
    }

    /**
     * Gets the attribute value for MemArtId, using the alias name MemArtId.
     * @return the MemArtId
     */
    public Number getMemArtId() {
        return (Number)getAttributeInternal(MEMARTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for MemArtId.
     * @param value value to set the MemArtId
     */
    public void setMemArtId(Number value) {
        setAttributeInternal(MEMARTID, value);
    }

    /**
     * Gets the attribute value for UserName, using the alias name UserName.
     * @return the UserName
     */
    public String getUserName() {
        return (String)getAttributeInternal(USERNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for UserName.
     * @param value value to set the UserName
     */
    public void setUserName(String value) {
        setAttributeInternal(USERNAME, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public MemberImpl getMember() {
        return (MemberImpl)getAttributeInternal(MEMBER);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setMember(MemberImpl value) {
        setAttributeInternal(MEMBER, value);
    }

    /**
     * @return the associated entity InitMemberImpl.
     */
    public InitMemberImpl getInitMember() {
        return (InitMemberImpl)getAttributeInternal(INITMEMBER);
    }

    /**
     * Sets <code>value</code> as the associated entity InitMemberImpl.
     */
    public void setInitMember(InitMemberImpl value) {
        setAttributeInternal(INITMEMBER, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getMemberSetup() {
        return (EntityImpl)getAttributeInternal(MEMBERSETUP);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setMemberSetup(EntityImpl value) {
        setAttributeInternal(MEMBERSETUP, value);
    }


    /**
     * @param labcol key constituent
     * @param artId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number labcol, DBSequence artId) {
        return new Key(new Object[]{labcol, artId});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if(operation==DML_INSERT) {
          SequenceImpl si=new SequenceImpl("book.SEQ_MEM_EXT_HIS_ART_ID",getDBTransaction());
          setArtId(new DBSequence( si.getSequenceNumber()));
        }
        super.doDML(operation, e);
    }
}
