package org.parsisys.tehranuniversity.library.model.eo;

import fadak.base.TemplateEntityObject;

import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jan 15 10:54:57 CST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SeeAlsoUniformTitleImpl extends TemplateEntityObject {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Labcol {
            public Object get(SeeAlsoUniformTitleImpl obj) {
                return obj.getLabcol();
            }

            public void put(SeeAlsoUniformTitleImpl obj, Object value) {
                obj.setLabcol((Number)value);
            }
        }
        ,
        UniTitleArtId {
            public Object get(SeeAlsoUniformTitleImpl obj) {
                return obj.getUniTitleArtId();
            }

            public void put(SeeAlsoUniformTitleImpl obj, Object value) {
                obj.setUniTitleArtId((Number)value);
            }
        }
        ,
        UniTitleArtIdRelatedTo {
            public Object get(SeeAlsoUniformTitleImpl obj) {
                return obj.getUniTitleArtIdRelatedTo();
            }

            public void put(SeeAlsoUniformTitleImpl obj, Object value) {
                obj.setUniTitleArtIdRelatedTo((Number)value);
            }
        }
        ,
        UniformTitle {
            public Object get(SeeAlsoUniformTitleImpl obj) {
                return obj.getUniformTitle();
            }

            public void put(SeeAlsoUniformTitleImpl obj, Object value) {
                obj.setUniformTitle((UniformTitleImpl)value);
            }
        }
        ,
        UniformTitle1 {
            public Object get(SeeAlsoUniformTitleImpl obj) {
                return obj.getUniformTitle1();
            }

            public void put(SeeAlsoUniformTitleImpl obj, Object value) {
                obj.setUniformTitle1((UniformTitleImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(SeeAlsoUniformTitleImpl object);

        public abstract void put(SeeAlsoUniformTitleImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int LABCOL = AttributesEnum.Labcol.index();
    public static final int UNITITLEARTID = AttributesEnum.UniTitleArtId.index();
    public static final int UNITITLEARTIDRELATEDTO = AttributesEnum.UniTitleArtIdRelatedTo.index();
    public static final int UNIFORMTITLE = AttributesEnum.UniformTitle.index();
    public static final int UNIFORMTITLE1 = AttributesEnum.UniformTitle1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SeeAlsoUniformTitleImpl() {
    }

    /**
     * Gets the attribute value for Labcol, using the alias name Labcol.
     * @return the Labcol
     */
    public Number getLabcol() {
        return (Number)getAttributeInternal(LABCOL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Labcol.
     * @param value value to set the Labcol
     */
    public void setLabcol(Number value) {
        setAttributeInternal(LABCOL, value);
    }

    /**
     * Gets the attribute value for UniTitleArtId, using the alias name UniTitleArtId.
     * @return the UniTitleArtId
     */
    public Number getUniTitleArtId() {
        return (Number)getAttributeInternal(UNITITLEARTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for UniTitleArtId.
     * @param value value to set the UniTitleArtId
     */
    public void setUniTitleArtId(Number value) {
        setAttributeInternal(UNITITLEARTID, value);
    }

    /**
     * Gets the attribute value for UniTitleArtIdRelatedTo, using the alias name UniTitleArtIdRelatedTo.
     * @return the UniTitleArtIdRelatedTo
     */
    public Number getUniTitleArtIdRelatedTo() {
        return (Number)getAttributeInternal(UNITITLEARTIDRELATEDTO);
    }

    /**
     * Sets <code>value</code> as the attribute value for UniTitleArtIdRelatedTo.
     * @param value value to set the UniTitleArtIdRelatedTo
     */
    public void setUniTitleArtIdRelatedTo(Number value) {
        setAttributeInternal(UNITITLEARTIDRELATEDTO, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity UniformTitleImpl.
     */
    public UniformTitleImpl getUniformTitle() {
        return (UniformTitleImpl)getAttributeInternal(UNIFORMTITLE);
    }

    /**
     * Sets <code>value</code> as the associated entity UniformTitleImpl.
     */
    public void setUniformTitle(UniformTitleImpl value) {
        setAttributeInternal(UNIFORMTITLE, value);
    }

    /**
     * @return the associated entity UniformTitleImpl.
     */
    public UniformTitleImpl getUniformTitle1() {
        return (UniformTitleImpl)getAttributeInternal(UNIFORMTITLE1);
    }

    /**
     * Sets <code>value</code> as the associated entity UniformTitleImpl.
     */
    public void setUniformTitle1(UniformTitleImpl value) {
        setAttributeInternal(UNIFORMTITLE1, value);
    }

    /**
     * @param labcol key constituent
     * @param uniTitleArtId key constituent
     * @param uniTitleArtIdRelatedTo key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number labcol, Number uniTitleArtId,
                                       Number uniTitleArtIdRelatedTo) {
        return new Key(new Object[]{labcol, uniTitleArtId, uniTitleArtIdRelatedTo});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("org.parsisys.tehranuniversity.library.model.eo.SeeAlsoUniformTitle");
        }
        return mDefinitionObject;
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}
