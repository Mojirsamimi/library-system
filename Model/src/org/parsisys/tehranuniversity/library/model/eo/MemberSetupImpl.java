package org.parsisys.tehranuniversity.library.model.eo;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;

import org.parsisys.tehranuniversity.library.model.vo.CatalogDetailVORowImpl;
import org.parsisys.tehranuniversity.library.util.FResult;
import org.parsisys.tehranuniversity.library.util.ParsiUtil;

import util.JSFUtils;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Dec 23 17:13:49 GMT+03:30 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MemberSetupImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * Validation method for LoanQuota.
     */
    public boolean validateLoanQuota(Number loanquota) {
      System.out.println("loanqouta: "+loanquota);
        if(loanquota==null)
            return false;
        return true;
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Labcol {
            public Object get(MemberSetupImpl obj) {
                return obj.getLabcol();
            }

            public void put(MemberSetupImpl obj, Object value) {
                obj.setLabcol((Number)value);
            }
        }
        ,
        ArtId {
            public Object get(MemberSetupImpl obj) {
                return obj.getArtId();
            }

            public void put(MemberSetupImpl obj, Object value) {
                obj.setArtId((DBSequence)value);
            }
        }
        ,
        Post {
            public Object get(MemberSetupImpl obj) {
                return obj.getPost();
            }

            public void put(MemberSetupImpl obj, Object value) {
                obj.setPost((Number)value);
            }
        }
        ,
        LoanQuota {
            public Object get(MemberSetupImpl obj) {
                return obj.getLoanQuota();
            }

            public void put(MemberSetupImpl obj, Object value) {
                obj.setLoanQuota((Number)value);
            }
        }
        ,
        LoanDuration {
            public Object get(MemberSetupImpl obj) {
                return obj.getLoanDuration();
            }

            public void put(MemberSetupImpl obj, Object value) {
                obj.setLoanDuration((Number)value);
            }
        }
        ,
        ToDate {
            public Object get(MemberSetupImpl obj) {
                return obj.getToDate();
            }

            public void put(MemberSetupImpl obj, Object value) {
                obj.setToDate((Number)value);
            }
        }
        ,
        FromDate {
            public Object get(MemberSetupImpl obj) {
                return obj.getFromDate();
            }

            public void put(MemberSetupImpl obj, Object value) {
                obj.setFromDate((Number)value);
            }
        }
        ,
        Active {
            public Object get(MemberSetupImpl obj) {
                return obj.getActive();
            }

            public void put(MemberSetupImpl obj, Object value) {
                obj.setActive((Number)value);
            }
        }
        ,
        ReserveQuota {
            public Object get(MemberSetupImpl obj) {
                return obj.getReserveQuota();
            }

            public void put(MemberSetupImpl obj, Object value) {
                obj.setReserveQuota((Number)value);
            }
        }
        ,
        MemshipDuration {
            public Object get(MemberSetupImpl obj) {
                return obj.getMemshipDuration();
            }

            public void put(MemberSetupImpl obj, Object value) {
                obj.setMemshipDuration((Number)value);
            }
        }
        ,
        PloanQuota {
            public Object get(MemberSetupImpl obj) {
                return obj.getPloanQuota();
            }

            public void put(MemberSetupImpl obj, Object value) {
                obj.setPloanQuota((Number)value);
            }
        }
        ,
        PostQueryParam {
            public Object get(MemberSetupImpl obj) {
                return obj.getPostQueryParam();
            }

            public void put(MemberSetupImpl obj, Object value) {
                obj.setPostQueryParam((Number)value);
            }
        }
        ,
        MemberExtentionHistory {
            public Object get(MemberSetupImpl obj) {
                return obj.getMemberExtentionHistory();
            }

            public void put(MemberSetupImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CatalogDetail {
            public Object get(MemberSetupImpl obj) {
                return obj.getCatalogDetail();
            }

            public void put(MemberSetupImpl obj, Object value) {
                obj.setCatalogDetail((CatalogDetailImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(MemberSetupImpl object);

        public abstract void put(MemberSetupImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int LABCOL = AttributesEnum.Labcol.index();
    public static final int ARTID = AttributesEnum.ArtId.index();
    public static final int POST = AttributesEnum.Post.index();
    public static final int LOANQUOTA = AttributesEnum.LoanQuota.index();
    public static final int LOANDURATION = AttributesEnum.LoanDuration.index();
    public static final int TODATE = AttributesEnum.ToDate.index();
    public static final int FROMDATE = AttributesEnum.FromDate.index();
    public static final int ACTIVE = AttributesEnum.Active.index();
    public static final int RESERVEQUOTA = AttributesEnum.ReserveQuota.index();
    public static final int MEMSHIPDURATION = AttributesEnum.MemshipDuration.index();
    public static final int PLOANQUOTA = AttributesEnum.PloanQuota.index();
    public static final int POSTQUERYPARAM = AttributesEnum.PostQueryParam.index();
    public static final int MEMBEREXTENTIONHISTORY = AttributesEnum.MemberExtentionHistory.index();
    public static final int CATALOGDETAIL = AttributesEnum.CatalogDetail.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MemberSetupImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("org.parsisys.tehranuniversity.library.model.eo.MemberSetup");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for Labcol, using the alias name Labcol.
     * @return the Labcol
     */
    public Number getLabcol() {
        return (Number)getAttributeInternal(LABCOL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Labcol.
     * @param value value to set the Labcol
     */
    public void setLabcol(Number value) {
        setAttributeInternal(LABCOL, value);
    }

    /**
     * Gets the attribute value for ArtId, using the alias name ArtId.
     * @return the ArtId
     */
    public DBSequence getArtId() {
        return (DBSequence)getAttributeInternal(ARTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ArtId.
     * @param value value to set the ArtId
     */
    public void setArtId(DBSequence value) {
        setAttributeInternal(ARTID, value);
    }

    /**
     * Gets the attribute value for Post, using the alias name Post.
     * @return the Post
     */
    public Number getPost() {
        return (Number)getAttributeInternal(POST);
    }

    /**
     * Sets <code>value</code> as the attribute value for Post.
     * @param value value to set the Post
     */
    public void setPost(Number value) {
        setAttributeInternal(POST, value);
    }

    /**
     * Gets the attribute value for LoanQuota, using the alias name LoanQuota.
     * @return the LoanQuota
     */
    public Number getLoanQuota() {
        return (Number)getAttributeInternal(LOANQUOTA);
    }

    /**
     * Sets <code>value</code> as the attribute value for LoanQuota.
     * @param value value to set the LoanQuota
     */
    public void setLoanQuota(Number value) {
        setAttributeInternal(LOANQUOTA, value);
    }

    /**
     * Gets the attribute value for LoanDuration, using the alias name LoanDuration.
     * @return the LoanDuration
     */
    public Number getLoanDuration() {
        return (Number)getAttributeInternal(LOANDURATION);
    }

    /**
     * Sets <code>value</code> as the attribute value for LoanDuration.
     * @param value value to set the LoanDuration
     */
    public void setLoanDuration(Number value) {
        setAttributeInternal(LOANDURATION, value);
    }

    /**
     * Gets the attribute value for ToDate, using the alias name ToDate.
     * @return the ToDate
     */
    public Number getToDate() {
        return (Number)getAttributeInternal(TODATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ToDate.
     * @param value value to set the ToDate
     */
    public void setToDate(Number value) {
        setAttributeInternal(TODATE, value);
    }

    /**
     * Gets the attribute value for FromDate, using the alias name FromDate.
     * @return the FromDate
     */
    public Number getFromDate() {
        return (Number)getAttributeInternal(FROMDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for FromDate.
     * @param value value to set the FromDate
     */
    public void setFromDate(Number value) {
        setAttributeInternal(FROMDATE, value);
    }

    /**
     * Gets the attribute value for Active, using the alias name Active.
     * @return the Active
     */
    public Number getActive() {
        return (Number)getAttributeInternal(ACTIVE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Active.
     * @param value value to set the Active
     */
    public void setActive(Number value) {
        setAttributeInternal(ACTIVE, value);
    }

    /**
     * Gets the attribute value for ReserveQuota, using the alias name ReserveQuota.
     * @return the ReserveQuota
     */
    public Number getReserveQuota() {
        return (Number)getAttributeInternal(RESERVEQUOTA);
    }

    /**
     * Sets <code>value</code> as the attribute value for ReserveQuota.
     * @param value value to set the ReserveQuota
     */
    public void setReserveQuota(Number value) {
        setAttributeInternal(RESERVEQUOTA, value);
    }

    /**
     * Gets the attribute value for MemshipDuration, using the alias name MemshipDuration.
     * @return the MemshipDuration
     */
    public Number getMemshipDuration() {
        return (Number)getAttributeInternal(MEMSHIPDURATION);
    }

    /**
     * Sets <code>value</code> as the attribute value for MemshipDuration.
     * @param value value to set the MemshipDuration
     */
    public void setMemshipDuration(Number value) {
        setAttributeInternal(MEMSHIPDURATION, value);
    }

    /**
     * Gets the attribute value for PloanQuota, using the alias name PloanQuota.
     * @return the PloanQuota
     */
    public Number getPloanQuota() {
        return (Number)getAttributeInternal(PLOANQUOTA);
    }

    /**
     * Sets <code>value</code> as the attribute value for PloanQuota.
     * @param value value to set the PloanQuota
     */
    public void setPloanQuota(Number value) {
        setAttributeInternal(PLOANQUOTA, value);
    }

    /**
     * Gets the attribute value for PostQueryParam, using the alias name PostQueryParam.
     * @return the PostQueryParam
     */
    public Number getPostQueryParam() {
        return (Number)getAttributeInternal(POSTQUERYPARAM);
    }

    /**
     * Sets <code>value</code> as the attribute value for PostQueryParam.
     * @param value value to set the PostQueryParam
     */
    public void setPostQueryParam(Number value) {
        setAttributeInternal(POSTQUERYPARAM, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getMemberExtentionHistory() {
        return (RowIterator)getAttributeInternal(MEMBEREXTENTIONHISTORY);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public CatalogDetailImpl getCatalogDetail() {
        return (CatalogDetailImpl)getAttributeInternal(CATALOGDETAIL);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setCatalogDetail(CatalogDetailImpl value) {
        setAttributeInternal(CATALOGDETAIL, value);
    }


    /**
     * @param labcol key constituent
     * @param artId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number labcol, DBSequence artId) {
        return new Key(new Object[]{labcol, artId});
    }

    /**
     * Validation method for MemberSetup.
     */
    public boolean validateMemberSetup() {
        
        
        return true;
    }


    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
       setActive(new Number (1));
       setFromDate(ParsiUtil.DateToNumber());
    //   setLabcol((Number) getDBTransaction().getSession().getUserData().get("labcolno"));
        super.create(attributeList);
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        
      
            if(operation==DML_INSERT) {
       
                     
            SequenceImpl si=new SequenceImpl("book.SEQ_CASHIER_ART_ID",getDBTransaction());
            setArtId(new DBSequence( si.getSequenceNumber()));
          
          
          
          }
        
        super.doDML(operation, e);
    }
}
